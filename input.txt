require 'fileutils'
require 'timeout'
require 'json'

class WaterEngine

  #==========================================================================

  VERSION = "1.0.0"

  def self.start(options)
    WaterEngine.new(options).start
  end

  def self.stop(options)
    WaterEngine.new(options).stop
  end

  def self.restart(options)
    WaterEngine.new(options).restart
  end

  #==========================================================================

  attr_reader :options, :quit

  def initialize(options)
    @options = options

    options[:inputfile] = JSON.parse(File.read(inputfile)) if inputfile?
    options[:rulefile]  = JSON.parse(File.read(rulefile))  if rulefile?
    options[:logfile]   = File.expand_path(logfile)   if logfile?
    options[:pidfile]   = File.expand_path(pidfile)   if pidfile?
  end

  #--------------------------------------------------------------------------

  [:inputfile, :rulefile, :pidfile, :logfile].each do |method|
    define_method "#{method}" do
      options[method]
    end

    define_method "#{method}?" do
      !options[method].nil?
    end
  end

  [:info, :debug, :warn, :error].each do |method|
    define_method "#{method}" do |arg|
      puts "[#{Process.pid}] [#{Time.now.utc}] [#{method.upcase}] #{arg}"
    end
  end

  def daemonize?
    options[:daemonize]
  end

  #--------------------------------------------------------------------------

  def start

    check_pid
    daemonize if daemonize?
    write_pid
    trap_signals

    redirect_output if logfile? && daemonize?

    info "Starting Water Engine..."
    while !quit
      info "Doing some work"
      sleep(2)  # in real life, something productive would happen here
    end
    info "Finished"

  end

  def stop

    redirect_output if logfile? && daemonize?

    info "Stopping Water Engine..."
    stop_process

  end

  def restart

    stop
    start

  end

  #==========================================================================
  # DAEMONIZING, PID MANAGEMENT, and OUTPUT REDIRECTION
  #==========================================================================

  def daemonize
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir "/"
  end

  def redirect_output
    FileUtils.mkdir_p(File.dirname(logfile), :mode => 0755)
    FileUtils.touch logfile
    File.chmod(0644, logfile)
    $stderr.reopen(logfile, 'a')
    $stdout.reopen($stderr)
    $stdout.sync = $stderr.sync = true
  end

  def stop_process
    case get_pid
      when nil, 0
        warn "Unable to stop. Process doesn't exist."
      else
        Process.kill('QUIT', get_pid)
    end

    Timeout::timeout(10) do
      sleep 1 while File.exists?(pidfile)
    end
  end

  def write_pid
    if pidfile?
      begin
        File.open(pidfile, ::File::CREAT | ::File::EXCL | ::File::WRONLY){|f| f.write("#{Process.pid}") }
        at_exit { File.delete(pidfile) if File.exists?(pidfile) }
      rescue Errno::EEXIST
        check_pid
        retry
      end
    end
  end

  def check_pid
    if pidfile?
      case pid_status(pidfile)
        when :running, :not_owned
          warn "A server is already running. Check #{pidfile}"
          exit(1)
        when :dead
          File.delete(pidfile)
      end
    end
  end

  def get_pid
    case pid_status(pidfile)
      when :running ,:not_owned
        return ::File.read(pidfile).to_i
    end
  end

  def pid_status(pidfile)
    return :exited unless File.exists?(pidfile)
    pid = ::File.read(pidfile).to_i
    return :dead if pid == 0
    Process.kill(0, pid)
    :running
  rescue Errno::ESRCH
    :dead
  rescue Errno::EPERM
    :not_owned
  end

  #==========================================================================
  # SIGNAL HANDLING
  #==========================================================================

  def trap_signals
    trap(:QUIT) do   # graceful shutdown
      @quit = true
    end
  end

  #==========================================================================

end
